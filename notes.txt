//Routing basically means to determine how an application responds 
//to a certain client request, to a certain URL. 
//It's not just the URL but also the http method which is used for the request.

------------------------------------------------------------------------------------------------------
const app = express()
this express is a function which upon calling will add a bunch of methods to 
our app variable here and the first one that we use is app.listen to start up a server.
app.listen(port, () => {

//this is a callback function, it will be called as soon as the server starts listening
}).
----------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
res.status.json() 
//By using this json methode here will automatically set our content type to application/json
---------------------------------------------------------------------------------------------------
APIs
------------------------------------------------
API basically stands for Application Programming Interface.

It's basically a piece of software that can be used by another piece of software, in order to allow applications to talk to each other.

Web APIs : where we simply build an app that sends data to a client whenever a request comes in.

Imagine we have our app running on a server and we have a client. So infact we effectively have two pieces of software talking to each other.

APIs are not only used to send data and aren't always related to web development or javascript.

So the application in API can be many different things as long as the piece of software is relatively stand alone.

EXAMPLE: Node file System or Http Modules. We can say they are small pieces of software and we can use them. We can interact with them by using their API.

When we use the readFile() function from the fs module we are actually using the fs API or NODE APIs: refers to the core node modules that we can interact with.

When we do DOM manipulation in the browser, we are not only using the Javascript language itself, we are using the DOM API that the browser exposes to us.

----------------------------------------------------
REST APIs--------
-----------------------
REST which stands for Representational  States Transfer is a way of building web apis in a logical way making them easy to consume because we build an API for ourselves  or for others to consume.

To build RESTful APIs which means API following the REST Architecture we need to follow a couple of principles.

1. We need to separate our API into logical resources. 

2. These resources should then be exposed which means to be made available using structured, resource-based URLs to perform different actions on data like reading, creating or deleting data,  3. the API should use the right HTTP methods and not the URL.

4.The data that we actually send back to the client or that we receive from the client should usually use the JSON data format

5. They must be stateless
-------------------------------
The key abstraction of information in REST is a resource and therefore all the data that we wanna share in the API should be divided into logical resources.

In the context of REST, 

Resource: It is an Object or representation of something which has data associated to it.

Any information that can be named can be a resource.

E.g. tours, users, reviews.

It just has to be a name though, not a verb.

2. Expose: WE need to expose which means to make available the data using some structured URLs that the client can send a request to.

E.g. https://www.natours.com/addNewTour

This entire address is called the URL and this addNewTour is called an API endpoint.

So our api will have many endpoints just like these fictional endpoints -- 
/getTour, /updateTour, /deleteTour, /getToursByUser. 
Each of these will send different data back to the client or also perform different actions.
-----------------------------------------
NOTE: Endpoints should contain only resources (nouns) and use HTTP methods for actions.

These endpoints do not follow the third rule which says that we should only use the HTTP methods in order to perform actions on data. So endpoints should only contains resources and not the actions that can be performed on them because they will quickly become a nightmare to maintain.

/getTour should be name as  /tours and GET HTTP method should be used  and send the data whenever a GET request is made to this endpoint. When a client uses GET HTTP method to access the endpoint because now verb is in the HTTP method that is GET and not in the URL.

NOTE: Common practice is to always use resource name in plural like /tours and not /tour
Calling that endpoint we get all the tours that are in our database
------------------------
We want a tour with id we add id after /tours/7 or in a search query.

The first HTTP method or verb that we can respond to is GET and it's used to perform the Read operation on data.

POST HTTP method should be used If the client wants to create a new resource in our database i.e. a new tour

A POST request can be used to send data to the server. So it makes sense to use POST in order to create new resources. In this case no id will be sent because the server should automatically figure out the ID for the new resource. The end point name is the same as before

-------------------------------
If the /tours endpoint is accessed with GET, we send data to the client. But if the same endpoint is accessed with POST. we expect data to come in with a request so that we can then create a new resource on the server side.

There should also be the availability to update resources and for that either a PUT or a PATCH request should be made to the endpoint. 

The difference b/w them is that with PUT, the client is supposed to send the entire updated object.

PATCH: The client is supposed to send only the part of the object that has been changed. But both of them have the ability to send data to the server.

PUT or PATCH are used to update an existing resource
----------------------------------------------------------
DELET HTTP method: to delete a resource

ID or some other unique identifier of the resource to be deleted should be part of the URL.

To perform this kind of request the client must be authenticated, basically log into your app.

CRUD operations:

Create, Read, Update and Delete.

There are operations which are not CRUD e.g. a log in or a search operation. These are not related to a particular resource and they are not CRUD either but we still can create endpoints for them like /login or /search

-------------------------
/getToursByUser can simply be translated to /users/3/tours.

This endpoint could send data about all the tours that user no 3 has booked.

Requesting tour no 9 to be deleted from user no 3.

/users/3/tours/9
---------------------------------------------------------------
About the data that the client receives or that the server receives from the client, usually we use the JSON data format.

JSON is a very lightweight data interchange format which is heavily used by web apis coded in any programming language.

Let say we have some json data in our database we could send it back like this to the client and we do some response formatting before sending. There are a couple of standards for this but we are gonna use a very simple one called Jsend. We simple create a new object and then add a status message to it in order to inform the client whether the request was a success, fail or error and then we put our original data into a new object called data.

Wrapping the data into an additional object is called Enveloping and it's a common practice to mitigate some security issues and other problems
-------------------------------------------------------
A RESTful API should always be stateless
----------------
Stateless RESTful API: All state is handled on the client. This means that each request must contain all the information necessary to process a certain request. The server should not have to remember previous request.

And state simply refers to a piece of data in the application that might change over time. For e.g. whether a certain user is logged in or on a page with a list with several pages what the current page is.

The fact that the state should be handled on the client means that each request must contain all the information that is necessary to process a certain request on the server.

E.g list with several pages: Let say we are currently on page 5 and want to move forward to page 6.

So we could have a simple end point called /tours/nextPage and submit a request to it. But then the server would then have to figure out what the current page is and based on that send the next page to the client.

nextPage = currentPage = 1

send(nextPage)
---------------------
In other words, the server would have to remember the previous request. It would have to handle the state server side and that is exactly what we want to avoid in RESTful APIs.
Instead in this case, we should create a /tours/page endpoint and pass the number 6 to it in order to request page no 6.
send(6). This way we would handle state on the client because on a client we would already knwo that we're on page five so all we had to do is just to add 1 and then request page no 6. So the server doesn't have to remember anything in this case.
All it has to do is to send data for page number 6 as we requested.

------------------------------------------------------------------------------------
/api/v1/tours,: It's a good practice to specify the API version. In case you want to do some changes to your API you can do that but simply then on v2 without breaking everyone who is still using v1.
So you can branch off, create a new version of your api but all users can still be using it.
the second parameter that our route accepts a callback function which we call routeHandler
app.get('/api/v1/tours/', (req, res)).
When someone hits this route, we simply want to send back all the tours. /tours : tours is the resource here.
Before we can send data back to the client we have to read it first from the json file.
We don't read the data inside route handler but we do it before.
------------------------
The top level code is only executed once which is right after the application startup.
`${__dirname}/dev-data/data/tours-simple.json
dirname is the folder where the current script is located.
JSON.parse() converts json object into an array of javascript object
---------------------------------------------------------------------
POST requests
-----------------
Implement a route handler for post request so that we can add a new tour to our data set.

POST request: It is made to create a new tour.
With a post request we can send data from the client to the server 
and this data is then ideally available on the request.
The request object is what holds all the data, all the information, about the request that was done.
And if that request contains some data that was sent that data should be on the request.
Out of the box, Express does not put that body data on the request object. 
In order to have that data available we have to use something called middleware.
app.use(rexpress.json())This express.json() is a middleware. 
A middleware is a function that can modify incoming requests
--------------------------------------
It's called middleware because it stands between in the middle of the request and the response.

So it's just a step that the request goes through while it's being processed.

And the step that the request goes through in this e.g. is simply that the data from the body is added to it. So it's added to the request object by using this middleware.
req.body

body is the property that is gonna be available on the request because we used that middleware.

We always need to send something in order to finish so called request/response cycle
----------------------------------------------------------------------------------------
first thing we need to do is to figure out the id of the new object.

When we create a new object we never specify the id of the new object. The database usually takes care of that.

A new object usually automatically gets it's new id.

Take the id of the last object and add 1 to it.

Object.assign allows us to create a new object by merging two existing objects together
----------------------------------------------------------------------------
We need to define a route which can accept a variable.

req.params is where all the parameters, all the variables that we define in the route are stored.

api/v1/tours/:id : so these variables here in the URL are called parameters and they are available in req.params for us to use.

req.params is a very nice object which automatically assigns the value to our variable, so our parameter that we defined.

We could define multiple: /api/v1/tours/:id/:x/:y

OPTIONAL Parameter: We can make any parameter optional we can or we can not specify it in the url

like api/v1/tours/:x/:y?
-----------------------------------
.find() is a regular JS function used on arrays

 tours.find() 

It will loop through the array and in each of the iterations we will have access to the current element and we will return either true or false in each of the iterations.

find() method will create an array which only contains the element where this comparison here turns out to be true.

When we multiply a string that looks like a number with another number will automatically be converted into a number.

 status: fail is sent whenever we have 400 status code

how to specify parameters in the URL

how to read parameters from the URL by using req.parms
-----------------------------------------------------------------
 We have two http methods to update data. PUT and PATCH.

And with PUT, we expect that our application receives the entire new updated object and with PATCH, we only expect the properties that should actually be updated on the object.

Use patch to update the properties that were updated

We expect a PATCH request to come in on the URL. We also need the id of the tour that needs to be updated.

When we have a delete request, the response is usually 204 means no content that's because we usually don't send any data back, instead we just send null
---------------------------------------------------------------------
All About middleware
----------------------------------
To start the request-response cycle, our Express app receives a request when someone hits a server for which it will then create a request and response object. That data will then be used and processed in order to generate and send back a meaningful response.

In order to process that data, In express we use something called middleware which can manipulate the request and response object or really execute any other code that we like.

Middleware is mostly about the request.

It's called middleware because it's a function that is executed between in the middle of receiving the request and sending the response.

In express everything is middleware.

express.json) is also called the body parser
-------------------------------------------------
To start the request response cycle our express app receives a request when someone hits a server for which it will then create a request and response object. That data will then be used and processed in order to generate and send back a meaningful response. In order to process that data in express we use something called middleware which can manipulate the request or the response object or really execute any other code that we like.

So middleware doesn't always have to be just about the request or the response object but it is usually is mostly about the request.

We used middleware before. we used express.json() to get access to the request body on the request object

It's called middleware because it's a function that is executed between in the middle of receiving the request and sending the response. In express, everything is middleware even our route definitions.

Even if we define our route we can think of the route handler functions that we wrote as middleware functions. They are middleware functions that are only executed for certain routes.

Some examples of middleware functions are express.json() which is also called body-parser. Some logging functionality or setting some http headers.

All middleware together that we use in our app is called middleware stack. The order of the middleware in the stack is actually defined by the order they are defined in the code. so the middleware that appears first in the code is executed before one that appears later
----------------------------------
Our request and response that were created in the beginning go through each middleware where they are processed or where just some other code is executed.  Then at the end of each middleware function a next function is called which is a function that we have access to in each middleware function just like the request and response objects.

When we call the next function, the next middleware in the stack will be executed with the exact same request and response object and that happens with all the middlewares until we reach the last one.

Just like this the initial request and response object go through each middleware step by step. And you can think of this whole process as a kind of pipeline where our data go through.

The last middleware function is usually a route handler function. In this handler we do not call the next function to move to the next middleware. Instead we finally send the response data back to the client. And like this we then finish the so-called request and response cycle